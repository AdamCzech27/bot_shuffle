import os
import re
import csv
import time
import random
import datetime
import logging
import requests

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException

# Nastavení loggeru
logging.basicConfig(
    level=logging.INFO,  # změň na DEBUG pro detailnější logování
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

class BetsIo:
    def __init__(self):
        self.url = "https://fifa-api.tesseractparadox.com/odin/predictions"
        self.url_web = "https://www.bets.io/en"
        self.driver = webdriver.Firefox()
        self.match_name = None
        self.prediction_line = None
        self.prediction_odds = None
        self.roi = None
        self.what = None
        self.match_id = None
        self.results = {}
        self.urls = [
            'https://www.bets.io/en/sports/cybersport',
            'https://www.bets.io/en/sports/cs2'
        ]

    def login_and_wait(self):
        logger.info(f"Otevírám stránku pro přihlášení: {self.url_web}")
        self.driver.get(self.url_web)

        delay = random.randint(3, 14)
        logger.debug(f"Čekám náhodně {delay} sekund před ověřením přihlášení...")
        time.sleep(delay)

        try:
            WebDriverWait(self.driver, 300).until(
                EC.presence_of_element_located(
                    (By.XPATH, "//span[contains(text(), 'Deposit') and contains(@class, 'sm:flex')]")
                )
            )
            logger.info("Přihlášení bylo úspěšně rozpoznáno.")
        except Exception as e:
            logger.error(f"Nepodařilo se přihlásit: {e}", exc_info=True)
            self.close()
            raise
            
    def load_api_data(self):
        logger.info("Čekám na data z API...")
        while True:
            try:
                logger.debug("Načítám data z API...")
                response = requests.get(self.url, timeout=5)
                response.raise_for_status()
                matches = response.json()

                if matches:
                    logger.info(f"Nalezeno {len(matches)} zápasů v API.")
                    parsed_matches = []
                    for match in matches:
                        parsed = {
                            "id": match['id'],
                            "name": match['name'],
                            "line": match['prediction']['line'],
                            "odd": match['prediction']['odd'],
                            "roi": match['prediction']['roi'] * 100,
                            "what": match['prediction']['what'],
                        }
                        logger.debug(f"Zpracován zápas: {parsed}")
                        parsed_matches.append(parsed)

                    time.sleep(5)
                    return parsed_matches

                else:
                    x = random.randint(1, 200)
                    if x > 185:
                        select_num = random.randint(0, len(self.urls) - 1)
                        if self.driver.current_url != self.urls[select_num]:
                            logger.info(f"Přecházím na náhodnou URL: {self.urls[select_num]}")
                            self.driver.get(self.urls[select_num])
                    else:
                        logger.debug("API nevrátilo zápasy, čekám 5 sekund...")
                        time.sleep(5)

            except requests.RequestException as e:
                logger.error(f"Chyba při načítání dat z API: {e}")
                time.sleep(5)  # počkej před dalším pokusem

    def collect_matches(self):
        logger.debug("Čekám na načtení týmů a zápasů...")
        try:
            self.driver.get('https://www.bets.io/en/sports')
            time.sleep(10)
            urls = [
                'https://www.bets.io/en/sports/rsoccer/valhalla-cup-2025-week-25-l-109968353',
                'https://www.bets.io/en/sports/rsoccer/valhalla-cup-3-2025-week-25-l-109968401',
                'https://www.bets.io/en/sports/rsoccer/valkyrie-cup-2025-week-25-l-109968389',
            ]

            for url in urls:
                try:
                    logger.info(f"Načítám stránku: {url}")
                    self.driver.get(url)
                    time.sleep(10)

                    iframe = self.driver.find_element(By.CSS_SELECTOR, "iframe[src='https://sport.bets.io/en']")
                    self.driver.switch_to.frame(iframe)

                    game_links = self.driver.find_elements(By.CSS_SELECTOR, "a.sb-BettingTable-link[data-test-id='game-link']")

                    for game in game_links:
                        teams = game.find_elements(By.CSS_SELECTOR, "span.sb-TeamColumn-name")
                        if len(teams) >= 2:
                            team1 = teams[0].get_attribute("title")  
                            team2 = teams[1].get_attribute("title")  
                            matchup = f"{team1} vs {team2}"

                            href = game.get_attribute("href")
                            self.results.update({matchup: href})

                    logger.info(f"Načteno {len(results)} zápasů.")

                except Exception as e:
                    logger.error(f"Chyba při zpracování URL {url}: {str(e)}")

        except Exception as main_e:
            logger.critical(f"Fatální chyba: {str(main_e)}")

            
    def count_bet_value(self, additional_bankroll, number_of_units, max_stake):
        time.sleep(3)
        wait = WebDriverWait(self.driver, 10)

        # Přepni do iframe, pokud je potřeba
        try:
            iframe = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "iframe[src='https://sport.bets.io/en']")))
            self.driver.switch_to.frame(iframe)
        except Exception as e:
            logger.error(f"Nepodařilo se přepnout do iframe: {e}")

        try:
            # Počkej na přítomnost BTC ikonky
            btc_icon = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "img[alt='BTC icon']")))

            # Najdi hodnota hned vedle (sourozenec v DOM)
            parent = btc_icon.find_element(By.XPATH, "..")
            value_div = parent.find_element(By.XPATH, "following-sibling::div[contains(@class, 'text-right')]")
            balance_str = value_div.text.strip()

            # Ošetření formátu (např. nahrazení čárek tečkou)
            balance_clean = balance_str.replace(',', '.').strip()

            try:
                balance = float(balance_clean)
            except ValueError as ve:
                logger.error(f"Chybný formát zůstatku BTC: '{balance_clean}'", exc_info=True)
                balance = 0.0

        except Exception as e:
            logger.error(f"Nepodařilo se najít BTC zůstatek: {e}")
            balance = 0.0
        finally:
            # Vždy přepni zpět do hlavního obsahu
            self.driver.switch_to.default_content()

        bet_value = round(((balance + additional_bankroll) / number_of_units) * 2) / 2
        return min(bet_value, max_stake)

    def go_to_match_bet(self):

        logger.info(f"Hledám zápas: {self.match_name}")

        for text,href in self.results.items():
            parts = text.split(' vs ')
            swapped_string = f"{parts[1]} vs {parts[0]}"

            if cleaned_text == self.match_name or swapped_string == self.match_name:
                logger.info(f"Zápas nalezen: {cleaned_text}. Přecházím na stránku: {href}")
                try:
                    self.driver.get(href)
                    delay = random.randint(3, 14)
                    logger.debug(f"Čekám {delay} sekund před pokračováním...")
                    time.sleep(delay)
                    logger.info("Úspěšně načtena stránka zápasu.")
                    return
                except Exception as e:
                    logger.error(f"Chyba při přechodu na stránku zápasu: {e}", exc_info=True)
                    return

        logger.warning(f"Zápas {self.match_name} nebyl nalezen v seznamu výsledků.")


    
    def find_a_bet(self):
        try:
            logger.info(f"Hledám container pro sázku typu '{self.what}'...")
            time.sleep(5)
            wait = WebDriverWait(self.driver, 10)
            # Přepni do iframe, pokud je potřeba
            try:
                iframe = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "iframe[src='https://sport.bets.io/en']")))
                self.driver.switch_to.frame(iframe)
            except Exception as e:
                logger.error(f"Nepodařilo se přepnout do iframe: {e}")
                return 0.0
            
            # Počkej, až bude tlačítko klikatelné
            button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "button[data-test-id='all']")))

            # Klikni na tlačítko
            button.click()
            
            # Najdi všechny markety Match Total Goals
            market_elements = wait.until(EC.presence_of_all_elements_located(
                (By.CSS_SELECTOR, "div.sb-MarketTable")
            ))

            for market in market_elements:
                try:
                    header = market.find_element(By.CSS_SELECTOR, "div.sb-MarketTable-header > span.sb-MarketTable-name")
                    header_text = header.text.strip()  # např. "Match Total Goals 6"

                    # Extrahuj číslo lajny z názvu marketu
                    match = re.search(r"Match Total Goals (\d+(\.\d+)?)", header_text)
                    if not match:
                        continue
                    total_goals_value = match.group(1)  # např. "6" nebo "6.5"

                    # Porovnej lajnu (číslo), pokud nesedí, jdi na další market
                    if float(total_goals_value) != float(slef.prediction_line):
                        continue

                    # Najdi všechny možnosti (under/over)
                    outcomes = market.find_elements(By.CSS_SELECTOR, "button.sb-Outcome")
                    for outcome in outcomes:
                        label = outcome.find_element(By.CSS_SELECTOR, "span.sb-Outcome-label").get_attribute("title").strip().lower()
                        odds_text = outcome.find_element(By.CSS_SELECTOR, "div.sb-AnimatedOdd").text.strip()

                        # Převod kurzu na float pro porovnání
                        try:
                            odds = float(odds_text.replace(',', '.'))
                        except ValueError:
                            continue

                        # Kontrola, jestli se shoduje label (under/over), kurz a lajna (už jsme lajnu zkontrolovali nahoře)
                        if label == self.what.lower() and abs(odds - float(self.prediction_odds)) < 0.01:
                            print(f"Klikám na {total_goals_value} {label} s kurzem {odds}")
                            outcome.click()
                            return True  # našel a kliknul

                except Exception as e:
                    logger.error(f"Chyba při zpracování marketu: {e}")

        except Exception as e:
            logger.error("Nepodarilo se kliknout na sazku", exc_info=True)

        time.sleep(random.randint(2, 5))

    
    def place_bet(self, bet_value):
        time.sleep(10)
        
        try:
            iframe = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "iframe[src='https://sport.bets.io/en']")))
            self.driver.switch_to.frame(iframe)
        except Exception as e:
            logger.error(f"Nepodařilo se přepnout do iframe: {e}")
            
        wait = WebDriverWait(self.driver, 10)
        
        try:
            # Najdi input pro stake, smaž ho a napiš novou hodnotu
            stake_input = wait.until(EC.element_to_be_clickable(
                (By.CSS_SELECTOR, "input.sb-StakeInput-input[data-test-id='bet-stake-input']")
            ))
            stake_input.clear()
            stake_input.send_keys(str(bet_value))

            # Najdi tlačítko Place Bet a klikni na něj
            place_bet_button = wait.until(EC.element_to_be_clickable(
                (By.CSS_SELECTOR, "button.sb-SlipFooter-placeBet[data-test-id='place-bet-button']")
            ))
            place_bet_button.click()

            logger.info(f"Sazka byla podana ve výši {bet_value}")
            
        except (TimeoutException, NoSuchElementException) as e_outer:
            logger.error(f"Prvek pro zadání částky nebyl nalezen nebo není interaktivní: {e_outer}", exc_info=True)
            logger.debug("Výstup HTML (zkrácen):\n" + self.driver.page_source[:2000])
            return

        time.sleep(random.randint(2, 5))


    def log_bet_to_csv(self, bet_value):
        filename = "shuffle_bets.csv"
        file_exists = os.path.isfile(filename)

        with open(filename, mode='a', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            if not file_exists:
                # Zapiš hlavičku, pokud soubor neexistuje
                writer.writerow(["Timestamp", "id", "Match", "What", "Line", "Odds", "ROI", "Bet Value"])

            writer.writerow([
                datetime.datetime.now().isoformat(),
                self.match_id,
                self.match_name,
                self.what,
                self.prediction_line,
                self.prediction_odds,
                round(self.roi, 2),
                bet_value
            ])
    
    def close(self):
        if self.driver:
            self.driver.quit()
    
    def run(self):
        try:
            self.login_and_wait()
            last_matches = set()

            while True:
                #<= datetime.time(24, 0)
                now = datetime.datetime.now().time()
                if datetime.time(7, 0) <= now:
                    try:
                        matches = self.load_api_data()
                        new_matches = [m for m in matches if m["id"] not in last_matches]

                        if not new_matches:
                            time.sleep(25)

                        if new_matches:
                            logger.info("Zjištěny nové zápasy, načítám data...")
                            self.results = {}
                            self.collect_matches()
                            
                            
                            bet_value = self.count_bet_value(additional_bankroll = 200 , number_of_units = 20, max_stake = 80)
                            logger.info(f"Hodnota sazky {bet_value}")
                            for match in matches:
                                try:
                                    self.match_name = match["name"]
                                    self.prediction_line = match["line"]
                                    self.roi = match["roi"]
                                    self.prediction_odds = "{:.2f}".format(float(match["odd"]))
                                    self.match_id = match["id"]
                                    self.what = match["what"]
                                    
                                    if self.match_id not in last_matches: 
                                        logger.info(f"Nový zápas: {self.match_name}, predikce: {self.what} {self.prediction_line} @ {self.prediction_odds}")

                                        self.go_to_match_bet()
                                        self.find_a_bet()

                                        self.place_bet(bet_value=bet_value)
                                        self.log_bet_to_csv(bet_value=bet_value)

                                        last_matches.add(self.match_id)  
                                        time.sleep(random.randint(2, 5))

                                except Exception as match_error:
                                    logger.error(f"Chyba při zpracování zápasu '{match['name']}': {match_error}", exc_info=True)       
                        else:
                            logger.debug("Žádné nové zápasy.")

                    except Exception as loop_error:
                        logger.error(f"Chyba během načítání nebo zpracování zápasů: {loop_error}", exc_info=True)

                else:
                    logger.info("Mimo provozních hodin (08:00–23:00). Ukončuji běh.")
                    break
        finally:
            self.close()


# Spuštění
if __name__ == "__main__":
    bot = BetsIo()
    bot.run()        
